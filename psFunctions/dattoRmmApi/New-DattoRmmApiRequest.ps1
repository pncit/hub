function New-DattoRmmApiRequest {
    <#
    .SYNOPSIS 
    Performs a query against the Datto RMM API

    .DESCRIPTION
    If provided with a valid API key pair OR a valid API access token, this will return the result of the specified API request
    See https://help.aem.autotask.net/en/Content/2SETUP/APIv2.htm for details on enabling the API and defining key pairs


    .PARAMETER apiAccessToken
    API Access Token generated by New-DattoRmmApiAccessToken.

    .PARAMETER accessKey
    API Access Key.

    .PARAMETER secretKey
    API secret key corresponding to the supplied access key.

    .PARAMETER apiUrl
    Region-specific API Url. Allowable values are:

    https://pinotage-api.centrastage.net

    https://merlot-api.centrastage.net

    https://concord-api.centrastage.net

    https://zinfandel-api.centrastage.net

    https://syrah-api.centrastage.net

    .PARAMETER apiMethod
    API SMethod (GET, POST, or PATCH)

    .PARAMETER apiRequest
    Endpoint for API request.
    For endpoint information, see Swagger links at https://help.aem.autotask.net/en/Content/2SETUP/APIv2.htm

    .PARAMETER apiRequestBody
    json-formatted body for POST or PATCH requests

    .PARAMETER depth
    Recursion level. This is not normally specified, and is used internally when using recursion to handle cool-down periods when rate limits have been exceeded

    .OUTPUTS
    [System.Object] custom object containing request response data

    .EXAMPLE
    $response = New-DattoRmmApiRequest -apiUrl "https://zinfandel-api.centrastage.net" -accessKey "fjlkdjk" -secretKey "adlsfaffdk" -apiMethod "get" -apiRequest "device/$deviceId"

    .EXAMPLE
    $response = New-DattoRmmApiRequest -apiUrl "https://zinfandel-api.centrastage.net" -apiAccessToken "fjdfkdfjfeifj" -apiMethod "get" -apiRequest "device/$deviceId"

    #>
    param 
    (
        [parameter(Mandatory=$true,ParameterSetName = "With Auth Key")]
        [validateNotNullorEmpty()]
        [String]$apiAccessToken,

        [parameter(Mandatory=$true,ParameterSetName = "Without Auth Key")]
        [validateNotNullorEmpty()]
        [String]$accessKey,

        [parameter(Mandatory=$true,ParameterSetName = "Without Auth Key")]
        [validateNotNullorEmpty()]
        [String]$secretKey,

        [parameter(Mandatory=$true,ParameterSetName = "With Auth Key")]
		[parameter(Mandatory=$true,ParameterSetName = "Without Auth Key")]
        [ValidateSet("https://pinotage-api.centrastage.net","https://merlot-api.centrastage.net","https://concord-api.centrastage.net","https://zinfandel-api.centrastage.net","https://syrah-api.centrastage.net")]
        [String]$apiUrl,

        [parameter(Mandatory=$true,ParameterSetName = "With Auth Key")]
		[parameter(Mandatory=$true,ParameterSetName = "Without Auth Key")]
        [ValidateSet("GET","POST","PATCH")]
        [String]$apiMethod,

        [parameter(Mandatory=$true,ParameterSetName = "With Auth Key")]
		[parameter(Mandatory=$true,ParameterSetName = "Without Auth Key")]
        [validateNotNullorEmpty()]
        [String]$apiRequest,

        [parameter(ParameterSetName = "With Auth Key")]
		[parameter(ParameterSetName = "Without Auth Key")]
        [String]$apiRequestBody,

        [parameter(ParameterSetName = "With Auth Key")]
		[parameter(ParameterSetName = "Without Auth Key")]
        [Int32]$depth
    )

    #get access token if one was not provided
    if ( ( $PSBoundParameters.ContainsKey( 'apiAccessToken')  ) -eq $false ) {
        $apiAccessToken = New-DattoRmmApiAccessToken -apiUrl $apiUrl -accessKey $accessKey -secretKey $secretKey
    }

    # some calls will just use the endpoint to add to the base $apiUrl (e.g. 'account/devices'), other calls
    # will include the entire uri (e.g. when using nextPageUrl or prevPageUrl)
    if ( $apiRequest.Substring(0,[math]::min($apiRequest.Length,$apiUrl.Length)) -eq $apiUrl ) {
        $uri = $apiRequest
    } else {
        $uri = "$apiUrl/api/v2/$apiRequest"
    }

    #set the parameters for the request
    $params = @{
        Uri         =	$uri
        Method      =	$apiMethod
        ContentType	= 	'application/json'
        Headers     =	@{
            'Authorization'	=	'Bearer {0}' -f $apiAccessToken
        }
    }

    #if body was defined (patch or put), add to params
    If ( $apiRequestBody ) {
        $params.Add( 'Body' , $apiRequestBody )
    }

    #make api request
    $response = ( Invoke-WebRequest @params -UseBasicParsing ) | Select-Object StatusCode,Content

    #if we got good data, convert it from json before returning it
    if ( $response.statusCode -eq 200 ) {
        $content = $response.content | ConvertFrom-Json
        if ( $null -eq $content.pageDetails ) {
            return $content
        } else {
            $member = $content | Get-Member | Where-Object { $_.MemberType -eq "NoteProperty" -and $_.Name -ne "pageDetails" } | Select-Object -ExpandProperty 'name' 
            if ( $member.GetTypeCode() -ne "String" ) {
                throw "Unable to process API response."
            }
            if ( $null -eq $content.pageDetails.nextPageUrl ) {
                return $content.$member
            } else {
                $paramsRest = @{
                    apiUrl         	=	$apiUrl
                    apiAccessToken  =	$apiAccessToken
                    apiMethod      	=	$apiMethod
                    apiRequest      =   $content.pageDetails.nextPageUrl
                }
                $restOfResponse = New-DattoRmmApiRequest @paramsRest  
                return $content.$member + $restOfResponse
            }
        }
    }
    
    # return reponse as long as status is not 429 or 403 (indicating rate limit issues that neccessitate a cool-down)
    if ( $response.statusCode -ne 429 -and $response.statusCode -ne 403 ) {
            return $response.content
    }

    # if we have already tried 5 times, quit
    if ( $depth -ge 4 ) {
        return $response.content
    }

    # otherwise, pause for cool down and try again
    if ( $response.statusCode -eq 429 ) {
        Start-Sleep -s 61
    } elseif ( $response.statusCode -eq 403 ) {
        Start-Sleep -s 601
    } 
    
    #set the params to call this function again with the same settings, incrementing depth
    $paramsOrig = @{
            apiUrl         	=	$apiUrl
            apiAccessToken  =	$apiAccessToken
            apiMethod      	=	$apiMethod
            apiRequest      =   $apiRequest
            depth           =   $depth + 1 
        }

    return New-DattoRmmApiRequest @paramsOrig     
}